mYZ = matrix(0, nrow=1, ncol = idim)
for (i in 1:N){
aux <-(t(as.matrix(mX[,i]))%*%lZ[[i]])
mXZ <- mXZ + aux[[1]]
aux2 <- (t(as.matrix(mY[,i]))%*%lZ[[i]])
mYZ <- mYZ + aux2[[1]]
}
beta <- (mXZ %*% mW %*% t(mYZ)) / (mXZ %*% mW %*% t(mXZ))
return(beta)
}
j=1
df <- simulatedf(N=N, TT=TT, sigmas=sigmas, beta=beta,
rho=rho, pie=pie, theta=theta)
# Create lists of instruments for individuals
df_x <- t(subset(reshape(data=subset(df, select = -c(y)), idvar = "identity",
timevar = "time", direction="wide", v.names="x"), select = -identity))
df_y <- t(subset(reshape(data=subset(df, select = -c(x)), idvar = "identity",
timevar = "time", direction="wide", v.names="y"), select = -identity))
zlist1 <- list()
zlist2 <- list()
zlist3 <- list()
for (i in 1:N){
zlist1[[i]] <- matrix(c(df$x[(df$identity==i) & (df$time==1)], df$x[(df$identity==i) & (df$time==2)],
df$x[(df$identity==i) & (df$time==3)], df$x[(df$identity==i) & (df$time==4)]),nrow=TT-1)
zlist2[[i]] <- diag(x = as.vector(zlist1[[i]]))
zlist3[[i]] <- matrix(c(zlist1[[i]][1], rep(0,(0.5*TT*(TT-1))-3), t(zlist1[[i]][1:2]), rep(0,(0.5*TT*(TT-1)-4)),
t(zlist1[[i]][1:3]), rep(0,(0.5*TT*(TT-1)-5)), t(zlist1[[i]][1:4])),
byrow=TRUE, ncol= (TT-1+TT-2), nrow=(TT-1))
}
W = 0
i = 1
while (i <100){
z_temp = c(df$x[(df$i==i) & (df$t==1)], df$x[(df$i==i) & (df$t==2)], df$x[(df$i==i) & (df$t==3)], df$x[(df$i==i) & (df$t==4)])
w_temp = (t(z_temp) %*% d %*% t(d) %*% z_temp)
W = W + w_temp
i=i+1
}
w_n = solve(W)
W2 = 0
i = 1
while (i <100){
z1_temp = c(df$x[(df$i==i) & (df$t==1)], df$x[(df$i==i) & (df$t==2)], df$x[(df$i==i) & (df$t==3)], df$x[(df$i==i) & (df$t==4)])
z2_temp = diag(x = z1_temp, nrow = TT-1, ncol = TT-1)
w2_temp = (t(z2_temp) %*% d %*% t(d) %*% z2_temp)
W2 = W2 + w2_temp
i=i+1
}
w2_n = solve(W2)
W3 = 0
i=1
while (i <100){
z1_temp = c(df$x[(df$i==i) & (df$t==1)], df$x[(df$i==i) & (df$t==2)], df$x[(df$i==i) & (df$t==3)], df$x[(df$i==i) & (df$t==4)])
z3_temp = matrix(c(z1_temp[1], rep(0,(0.5*TT*(TT-1))-3), t(z1_temp[1:2]), rep(0,(0.5*TT*(TT-1)-4)),t(z1_temp[1:3]), rep(0,(0.5*TT*(TT-1)-5)), t(z1_temp[1:4])), byrow=TRUE, ncol= 7, nrow=4)
w3_temp = (t(z3_temp) %*% d %*% t(d) %*% z3_temp)
W3 = W3 + w3_temp
i=i+1
}
w3_n = solve(W3)
beta_IVGMM1[j] <- estGMM(df_x,df_y,zlist1,w_n[[1]])
beta_IVGMM3[j] <- estGMM(df_x,df_y,zlist2,w2_n)
beta_IVGMM3[j] <- estGMM(df_x,df_y,zlist3,w3_n)
w_temp = (t(z_temp) %*% d %*% t(d) %*% z_temp)
i=1
z_temp = c(df$x[(df$i==i) & (df$t==1)], df$x[(df$i==i) & (df$t==2)], df$x[(df$i==i) & (df$t==3)], df$x[(df$i==i) & (df$t==4)])
z_temp
d
d %*% t(d)
z_temp
t(z_temp) %*% d
knitr::opts_chunk$set(echo = TRUE)
library(plm)
library(parallel)
simN <- 100
N<- 100
TT<- 5
sigmas <- c(1,1,1)
beta <- 1
rho <- 0.5
pie <- 1
theta <- 0
set.seed(420)
simulatedf <- function(N,TT,sigmas,beta,rho,pie,theta){
alpha <- rnorm(N,0,sigmas[1])
epsilon <- matrix(rnorm(N*(TT+1),0,sigmas[2]),ncol = TT, nrow = N)
chi <- matrix(rnorm(N*(TT+1),0,sigmas[2]),ncol = TT, nrow = N)
df <- data.frame(identity = integer(), time = integer(), x = double(), y=double())
for (n in 1:N){
x <- pie*alpha[n]/(1-rho) + (theta*rnorm(1,0,1) + rnorm(1,0,1)) /sqrt((1-rho^2))
y <- beta*x+alpha[n] + epsilon[n,1]
df<- rbind(df, setNames(as.list(c(n,1,x,y)),names(df)))
for (t in 2:TT){
x_new <- rho*x + pie*alpha[n] + theta*epsilon[n,t-1] + chi[n,t]
y_new <- beta*x_new + alpha[n] + epsilon[n,t]
df<- rbind(df, setNames(as.list(c(n,t,x_new,y_new)),names(df)))
x <- x_new
y <- y_new
}
}
return(df)
}
df <- simulatedf(N, TT, sigmas, beta, rho, pie, theta)
i = 17
z1 = c(df$x[(df$identity==i) & (df$time==1)], df$x[(df$identity==i) & (df$time==2)], df$x[(df$identity==i) & (df$time==3)], df$x[(df$identity==i) & (df$time==4)])
z2 = diag(x = z1, nrow = TT-1, ncol = TT-1)
z3 = matrix(c(z1[1], rep(0,(0.5*TT*(TT-1))-3), t(z1[1:2]), rep(0,(0.5*TT*(TT-1)-4)),t(z1[1:3]), rep(0,(0.5*TT*(TT-1)-5)), t(z1[1:4])), byrow=TRUE, ncol= (TT-1+TT-2), nrow=(TT-1))
print(z1)
print(z2)
print(z3)
simN <- 100
beta_IVGMM1 <- rep(0,simN)
beta_IVGMM2 <- rep(0,simN)
beta_IVGMM3 <- rep(0,simN)
d = matrix(c(c(1, -1, 0,0,0), c(0,1,-1,0,0),
c(0,0,1,-1,0), c(0,0,0,1,-1)), nrow=TT-1, ncol=TT, byrow=TRUE)
# Function for IV-GMM estimation
estGMM <- function(mX,mY,lZ,mW){
TT = dim(mX)[1]
N = dim(mX)[2]
# Differentiate the data
d = matrix(c(c(1, -1, 0,0,0), c(0,1,-1,0,0),
c(0,0,1,-1,0), c(0,0,0,1,-1)), nrow=TT-1, ncol=TT, byrow=TRUE)
mX = d %*% mX
mY = d %*% mY
idim <- dim(lZ[[1]])[2]
mXZ = matrix(0, nrow=1, ncol = idim)
mYZ = matrix(0, nrow=1, ncol = idim)
for (i in 1:N){
aux <-(t(as.matrix(mX[,i]))%*%lZ[[i]])
mXZ <- mXZ + aux[[1]]
aux2 <- (t(as.matrix(mY[,i]))%*%lZ[[i]])
mYZ <- mYZ + aux2[[1]]
}
beta <- (mXZ %*% mW %*% t(mYZ)) / (mXZ %*% mW %*% t(mXZ))
return(beta)
}
for (j in 1:simN){
df <- simulatedf(N=N, TT=TT, sigmas=sigmas, beta=beta,
rho=rho, pie=pie, theta=theta)
# Create lists of instruments for individuals
df_x <- t(subset(reshape(data=subset(df, select = -c(y)), idvar = "identity",
timevar = "time", direction="wide", v.names="x"), select = -identity))
df_y <- t(subset(reshape(data=subset(df, select = -c(x)), idvar = "identity",
timevar = "time", direction="wide", v.names="y"), select = -identity))
zlist1 <- list()
zlist2 <- list()
zlist3 <- list()
for (i in 1:N){
zlist1[[i]] <- matrix(c(df$x[(df$identity==i) & (df$time==1)], df$x[(df$identity==i) & (df$time==2)],
df$x[(df$identity==i) & (df$time==3)], df$x[(df$identity==i) & (df$time==4)]),nrow=TT-1)
zlist2[[i]] <- diag(x = as.vector(zlist1[[i]]))
zlist3[[i]] <- matrix(c(zlist1[[i]][1], rep(0,(0.5*TT*(TT-1))-3), t(zlist1[[i]][1:2]), rep(0,(0.5*TT*(TT-1)-4)),
t(zlist1[[i]][1:3]), rep(0,(0.5*TT*(TT-1)-5)), t(zlist1[[i]][1:4])),
byrow=TRUE, ncol= (TT-1+TT-2), nrow=(TT-1))
}
W = 0
i = 1
while (i <100){
z_temp = c(df$x[(df$identity==i) & (df$time==1)], df$x[(df$identity==i) & (df$time==2)], df$x[(df$identity==i) & (df$time==3)], df$x[(df$identity==i) & (df$time==4)])
w_temp = (t(z_temp) %*% d %*% t(d) %*% z_temp)
W = W + w_temp
i=i+1
}
w_n = solve(W)
W2 = 0
i = 1
while (i <100){
z1_temp = c(df$x[(df$i==i) & (df$t==1)], df$x[(df$i==i) & (df$t==2)], df$x[(df$i==i) & (df$t==3)], df$x[(df$i==i) & (df$t==4)])
z2_temp = diag(x = z1_temp, nrow = TT-1, ncol = TT-1)
w2_temp = (t(z2_temp) %*% d %*% t(d) %*% z2_temp)
W2 = W2 + w2_temp
i=i+1
}
w2_n = solve(W2)
W3 = 0
i=1
while (i <100){
z1_temp = c(df$x[(df$i==i) & (df$t==1)], df$x[(df$i==i) & (df$t==2)], df$x[(df$i==i) & (df$t==3)], df$x[(df$i==i) & (df$t==4)])
z3_temp = matrix(c(z1_temp[1], rep(0,(0.5*TT*(TT-1))-3), t(z1_temp[1:2]), rep(0,(0.5*TT*(TT-1)-4)),t(z1_temp[1:3]), rep(0,(0.5*TT*(TT-1)-5)), t(z1_temp[1:4])), byrow=TRUE, ncol= 7, nrow=4)
w3_temp = (t(z3_temp) %*% d %*% t(d) %*% z3_temp)
W3 = W3 + w3_temp
i=i+1
}
w3_n = solve(W3)
beta_IVGMM1[j] <- estGMM(df_x,df_y,zlist1,w_n[[1]])
beta_IVGMM3[j] <- estGMM(df_x,df_y,zlist2,w2_n)
beta_IVGMM3[j] <- estGMM(df_x,df_y,zlist3,w3_n)
}
par(mfrow=c(1,3))
plot(c(1:simN), beta_IVGMM1, xlab = 'Simulation', ylim=c(-1,3))
abline(h=c(mean(beta_IVGMM1),mean(beta_IVGMM1)+sd(beta_IVGMM1),
mean(beta_IVGMM1)-sd(beta_IVGMM1)),
col=c('lightsteelblue','peachpuff2','peachpuff2'))
plot(c(1:simN), beta_IVGMM2, xlab = 'Simulation', ylim=c(-1,3))
abline(h=c(mean(beta_IVGMM2),mean(beta_IVGMM2)+sd(beta_IVGMM2),
mean(beta_IVGMM2)-sd(beta_IVGMM2)),
col=c('lightsteelblue','peachpuff2','peachpuff2'))
plot(c(1:simN), beta_IVGMM3, xlab = 'Simulation', ylim=c(-1,3))
abline(h=c(mean(beta_IVGMM3),mean(beta_IVGMM3)+sd(beta_IVGMM3),
mean(beta_IVGMM3)-sd(beta_IVGMM3)),
col=c('lightsteelblue','peachpuff2','peachpuff2'))
simN <- 100
beta_IVGMM1 <- rep(0,simN)
beta_IVGMM2 <- rep(0,simN)
beta_IVGMM3 <- rep(0,simN)
d = matrix(c(c(1, -1, 0,0,0), c(0,1,-1,0,0),
c(0,0,1,-1,0), c(0,0,0,1,-1)), nrow=TT-1, ncol=TT, byrow=TRUE)
# Function for IV-GMM estimation
estGMM <- function(mX,mY,lZ,mW){
TT = dim(mX)[1]
N = dim(mX)[2]
# Differentiate the data
d = matrix(c(c(1, -1, 0,0,0), c(0,1,-1,0,0),
c(0,0,1,-1,0), c(0,0,0,1,-1)), nrow=TT-1, ncol=TT, byrow=TRUE)
mX = d %*% mX
mY = d %*% mY
idim <- dim(lZ[[1]])[2]
mXZ = matrix(0, nrow=1, ncol = idim)
mYZ = matrix(0, nrow=1, ncol = idim)
for (i in 1:N){
aux <-(t(as.matrix(mX[,i]))%*%lZ[[i]])
mXZ <- mXZ + aux[[1]]
aux2 <- (t(as.matrix(mY[,i]))%*%lZ[[i]])
mYZ <- mYZ + aux2[[1]]
}
beta <- (mXZ %*% mW %*% t(mYZ)) / (mXZ %*% mW %*% t(mXZ))
return(beta)
}
for (j in 1:simN){
df <- simulatedf(N=N, TT=TT, sigmas=sigmas, beta=beta,
rho=rho, pie=pie, theta=theta)
# Create lists of instruments for individuals
df_x <- t(subset(reshape(data=subset(df, select = -c(y)), idvar = "identity",
timevar = "time", direction="wide", v.names="x"), select = -identity))
df_y <- t(subset(reshape(data=subset(df, select = -c(x)), idvar = "identity",
timevar = "time", direction="wide", v.names="y"), select = -identity))
zlist1 <- list()
zlist2 <- list()
zlist3 <- list()
for (i in 1:N){
zlist1[[i]] <- matrix(c(df$x[(df$identity==i) & (df$time==1)], df$x[(df$identity==i) & (df$time==2)],
df$x[(df$identity==i) & (df$time==3)], df$x[(df$identity==i) & (df$time==4)]),nrow=TT-1)
zlist2[[i]] <- diag(x = as.vector(zlist1[[i]]))
zlist3[[i]] <- matrix(c(zlist1[[i]][1], rep(0,(0.5*TT*(TT-1))-3), t(zlist1[[i]][1:2]), rep(0,(0.5*TT*(TT-1)-4)),
t(zlist1[[i]][1:3]), rep(0,(0.5*TT*(TT-1)-5)), t(zlist1[[i]][1:4])),
byrow=TRUE, ncol= (TT-1+TT-2), nrow=(TT-1))
}
W = 0
i = 1
while (i <100){
z_temp = c(df$x[(df$identity==i) & (df$time==1)], df$x[(df$identity==i) & (df$time==2)], df$x[(df$identity==i) & (df$time==3)], df$x[(df$identity==i) & (df$time==4)])
w_temp = (t(z_temp) %*% d %*% t(d) %*% z_temp)
W = W + w_temp
i=i+1
}
w_n = solve(W)
W2 = 0
i = 1
while (i <100){
z1_temp = c(df$x[(df$i==i) & (df$t==1)], df$x[(df$i==i) & (df$t==2)], df$x[(df$i==i) & (df$t==3)], df$x[(df$i==i) & (df$t==4)])
z2_temp = diag(x = z1_temp, nrow = TT-1, ncol = TT-1)
w2_temp = (t(z2_temp) %*% d %*% t(d) %*% z2_temp)
W2 = W2 + w2_temp
i=i+1
}
w2_n = solve(W2)
W3 = 0
i=1
while (i <100){
z1_temp = c(df$x[(df$i==i) & (df$t==1)], df$x[(df$i==i) & (df$t==2)], df$x[(df$i==i) & (df$t==3)], df$x[(df$i==i) & (df$t==4)])
z3_temp = matrix(c(z1_temp[1], rep(0,(0.5*TT*(TT-1))-3), t(z1_temp[1:2]), rep(0,(0.5*TT*(TT-1)-4)),t(z1_temp[1:3]), rep(0,(0.5*TT*(TT-1)-5)), t(z1_temp[1:4])), byrow=TRUE, ncol= 7, nrow=4)
w3_temp = (t(z3_temp) %*% d %*% t(d) %*% z3_temp)
W3 = W3 + w3_temp
i=i+1
}
w3_n = solve(W3)
beta_IVGMM1[j] <- estGMM(df_x,df_y,zlist1,w_n[[1]])
beta_IVGMM2[j] <- estGMM(df_x,df_y,zlist2,w2_n)
beta_IVGMM3[j] <- estGMM(df_x,df_y,zlist3,w3_n)
}
par(mfrow=c(1,3))
plot(c(1:simN), beta_IVGMM1, xlab = 'Simulation', ylim=c(-1,3))
abline(h=c(mean(beta_IVGMM1),mean(beta_IVGMM1)+sd(beta_IVGMM1),
mean(beta_IVGMM1)-sd(beta_IVGMM1)),
col=c('lightsteelblue','peachpuff2','peachpuff2'))
plot(c(1:simN), beta_IVGMM2, xlab = 'Simulation', ylim=c(-1,3))
abline(h=c(mean(beta_IVGMM2),mean(beta_IVGMM2)+sd(beta_IVGMM2),
mean(beta_IVGMM2)-sd(beta_IVGMM2)),
col=c('lightsteelblue','peachpuff2','peachpuff2'))
plot(c(1:simN), beta_IVGMM3, xlab = 'Simulation', ylim=c(-1,3))
abline(h=c(mean(beta_IVGMM3),mean(beta_IVGMM3)+sd(beta_IVGMM3),
mean(beta_IVGMM3)-sd(beta_IVGMM3)),
col=c('lightsteelblue','peachpuff2','peachpuff2'))
library(smacof)
help(smacof)
??smacof
library('dummies')
library('ramify')
library('readxl')
library('flexcust')
setwd("/Users/diego/Documents/GitHub/Unsupervised-ML/hw3")
df_sample <- read_xlsx("df_sample.xlsx")
# Leaving out the weights
df_sample <- df_sample[,!(names(df_sample) %in% c('ST004D01T','BSMJ','W_FSTUWT','CNT','SCIEEFF','MOTIVAT','CPSVALUE','EMOSUPP','PARED','HOMEPOS'))]
# Convert all variable types to numeric
df_sample <- as.data.frame(apply(df_sample, 2, as.numeric))
# Scaling
df_sample <- as.data.frame(apply(df_sample, 2,
function(x) (x - min(x)) / (max(x) - min(x))))
better_kmeans <- function(dat, centers, eps){
# Computes kmeans clusters on dat (dataframe)
# with initial centers given by centers
k <- dim(centers)[1]
n <- length(dat[[1]])
conv <- 100000
centers_old <- centers
iters <- 1
while (conv > eps && iters < 26){
print(iters)
dist <- c()
# Compute the distance to each center
for (i in (1:k)){
dist <- cbind(dist, sqrt(rowSums((dat-t(replicate(n,centers_old[i,])))^2)))
}
# Assign groups
groups <- argmin(dist, rows=TRUE)
dums <- dummy(groups)
# Compute new centers
new_centers <- c()
for (i in (1:k)){
new_centers <- rbind(new_centers, colSums(dat * dums[,i])/sum(dums[,i]) )
}
# Check convergence
conv <- sqrt(sum((new_centers-centers_old)^2))
# Update variables
centers_old <- new_centers
iters <- iters+1
}
return(list(new_centers, cbind(dat,groups)))
}
rand_centers <- function(dat,k){
# Returns centers based on assinging randomly
# the data to k groups and averaging them
p <- length(dat)
n <- length(dat[[1]])
groups <- sample(1:k, n, replace=TRUE)
dums <- dummy(groups)
centers <- c()
for (i in (1:k)){
centers <- rbind(centers, colSums(dat * dums[,i])/sum(dums[,i]) )
}
return(centers)
}
centers <- rand_centers(df_sample,4)
res_pack <- kcca(df_sample, centers)
res_pack2 <- kmeans(df_sample, centers, iter.max=1)
res <- better_kmeans(df_sample, centers, 0.001)
dat1 <- res[[2]]
res[[1]]
res_pack@centers
res_pack2$centers
library('flexclust')
centers <- rand_centers(df_sample,4)
res_pack <- kcca(df_sample, centers)
res_pack2 <- kmeans(df_sample, centers, iter.max=1)
res <- better_kmeans(df_sample, centers, 0.001)
dat1 <- res[[2]]
res[[1]]
res_pack@centers
res_pack2$centers
library('dummies')
library('ramify')
library('readxl')
library('flexclust')
setwd("/Users/diego/Documents/GitHub/Unsupervised-ML/hw3")
df_sample <- read_xlsx("df_sample.xlsx")
# Leaving out the weights
df_sample <- df_sample[,!(names(df_sample) %in% c('ST004D01T','BSMJ','W_FSTUWT','CNT','SCIEEFF','MOTIVAT','CPSVALUE','EMOSUPP','PARED','HOMEPOS'))]
# Convert all variable types to numeric
df_sample <- as.data.frame(apply(df_sample, 2, as.numeric))
# Scaling
df_sample <- as.data.frame(apply(df_sample, 2,
function(x) (x - min(x)) / (max(x) - min(x))))
better_kmeans <- function(dat, centers, eps){
# Computes kmeans clusters on dat (dataframe)
# with initial centers given by centers
k <- dim(centers)[1]
n <- length(dat[[1]])
conv <- 100000
centers_old <- centers
iters <- 1
while (conv > eps && iters < 26){
print(iters)
dist <- c()
# Compute the distance to each center
for (i in (1:k)){
dist <- cbind(dist, sqrt(rowSums((dat-t(replicate(n,centers_old[i,])))^2)))
}
# Assign groups
groups <- argmin(dist, rows=TRUE)
dums <- dummy(groups)
# Compute new centers
new_centers <- c()
for (i in (1:k)){
new_centers <- rbind(new_centers, colSums(dat * dums[,i])/sum(dums[,i]) )
}
# Check convergence
conv <- sqrt(sum((new_centers-centers_old)^2))
# Update variables
centers_old <- new_centers
iters <- iters+1
}
return(list(new_centers, cbind(dat,groups)))
}
rand_centers <- function(dat,k){
# Returns centers based on assinging randomly
# the data to k groups and averaging them
p <- length(dat)
n <- length(dat[[1]])
groups <- sample(1:k, n, replace=TRUE)
dums <- dummy(groups)
centers <- c()
for (i in (1:k)){
centers <- rbind(centers, colSums(dat * dums[,i])/sum(dums[,i]) )
}
return(centers)
}
centers <- rand_centers(df_sample,4)
res_pack <- kcca(df_sample, centers)
res_pack2 <- kmeans(df_sample, centers, iter.max=1)
res <- better_kmeans(df_sample, centers, 0.001)
dat1 <- res[[2]]
res[[1]]
res_pack@centers
res_pack2$centers
View(dat1)
View(res_pack)
View(res_pack)
dat1$groups == res_pack@cluster
res[[1]]
res_pack@centers
setwd("/Users/diego/Documents/GitHub/Unsupervised-ML/hw3")
res[[1]]
res_pack@centers
res[[1]]
res_pack@centers
library('dummies')
library('ramify')
library('readxl')
library('flexclust')
setwd("/Users/diego/Documents/GitHub/Unsupervised-ML/hw3")
df_sample <- read_xlsx("df_sample.xlsx")
# Leaving out the weights
df_sample <- df_sample[,!(names(df_sample) %in% c('ST004D01T','BSMJ','W_FSTUWT','CNT','SCIEEFF'))]
# Convert all variable types to numeric
df_sample <- as.data.frame(apply(df_sample, 2, as.numeric))
# Scaling
df_sample <- as.data.frame(apply(df_sample, 2,
function(x) (x - min(x)) / (max(x) - min(x))))
better_kmeans <- function(dat, centers, eps){
# Computes kmeans clusters on dat (dataframe)
# with initial centers given by centers
k <- dim(centers)[1]
n <- length(dat[[1]])
conv <- 100000
centers_old <- centers
iters <- 1
while (conv > eps && iters < 26){
print(iters)
dist <- c()
# Compute the distance to each center
for (i in (1:k)){
dist <- cbind(dist, sqrt(rowSums((dat-t(replicate(n,centers_old[i,])))^2)))
}
# Assign groups
groups <- argmin(dist, rows=TRUE)
dums <- dummy(groups)
# Compute new centers
new_centers <- c()
for (i in (1:k)){
new_centers <- rbind(new_centers, colSums(dat * dums[,i])/sum(dums[,i]) )
}
# Check convergence
conv <- sqrt(sum((new_centers-centers_old)^2))
# Update variables
centers_old <- new_centers
iters <- iters+1
}
return(list(new_centers, cbind(dat,groups)))
}
rand_centers <- function(dat,k){
# Returns centers based on assinging randomly
# the data to k groups and averaging them
p <- length(dat)
n <- length(dat[[1]])
groups <- sample(1:k, n, replace=TRUE)
dums <- dummy(groups)
centers <- c()
for (i in (1:k)){
centers <- rbind(centers, colSums(dat * dums[,i])/sum(dums[,i]) )
}
return(centers)
}
centers <- rand_centers(df_sample,4)
res_pack <- kcca(df_sample, centers)
res <- better_kmeans(df_sample, centers, 0.001)
dat1 <- res[[2]]
res[[1]]
res_pack@centers
print(xtable(res[[1]], type = "latex"))
library(xtable)
print(xtable(res[[1]], type = "latex"))
print(xtable(res_pack@centers, type = "latex"))
